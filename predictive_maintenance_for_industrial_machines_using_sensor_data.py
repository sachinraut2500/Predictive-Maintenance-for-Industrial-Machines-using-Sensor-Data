# -*- coding: utf-8 -*-
"""Predictive Maintenance for Industrial Machines using Sensor Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pKYgrwW1BbCxeOcU-7lO2w31ebT7-_yO
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

def load_data():
    # Example dataset URL (NASA turbofan engine degradation simulation dataset)
    # You can download the dataset from:
    # https://data.nasa.gov/dataset/Turbofan-engine-degradation-simulation-data-set/vrks-gjie
    # For this example, assume it's loaded locally as 'engine_data.csv'

    df = pd.read_csv('engine_data.csv')
    return df

def preprocess(df):
    # Select useful features and target
    # Target: whether the machine is going to fail soon (1) or not (0)
    df['RUL'] = df.groupby('engine_id')['cycle'].transform(max) - df['cycle']
    df['target'] = df['RUL'].apply(lambda x: 1 if x <= 30 else 0)  # Predict failure within next 30 cycles

    features = [col for col in df.columns if col not in ['engine_id', 'cycle', 'target', 'RUL']]
    X = df[features]
    y = df['target']

    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    return train_test_split(X_scaled, y, test_size=0.3, random_state=42)

def train_model(X_train, y_train):
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    return model

def evaluate_model(model, X_test, y_test):
    y_pred = model.predict(X_test)
    print("Confusion Matrix:")
    print(confusion_matrix(y_test, y_pred))
    print("\nClassification Report:")
    print(classification_report(y_test, y_pred))

def main():
    print("Loading data...")
    df = load_data()
    print("Preprocessing...")
    X_train, X_test, y_train, y_test = preprocess(df)
    print("Training model...")
    model = train_model(X_train, y_train)
    print("Evaluating model...")
    evaluate_model(model, X_test, y_test)

if __name__ == "__main__":
    main()